#include "services_dune.fcl"
#include "caldata_dune.fcl"
#include "hitfindermodules_dune.fcl"
#include "cluster_dune.fcl"
#include "trackfindermodules_dune.fcl"
#include "pandoramodules_dune.fcl"
#include "calorimetry_dune10kt.fcl"
#include "mctrutht0matching.fcl"
#include "t0reco.fcl"
#include "particleid.fcl"
#include "showerfindermodules_dune.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "opticaldetectorservices_dune.fcl"

#include "tools_dune.fcl"

process_name: Reco

services:
{
  # Load the service that manages root files for histograms.
  TFileService: { fileName: "%ifb_reco_hist.root" }
  TimeTracker:       {}
  MemoryTracker:     {}
  RandomNumberGenerator: {} #ART native random number generator
  message:              @local::dune_message_services_prod_debug
  FileCatalogMetadata:  @local::art_file_catalog_mc
                        @table::dunefddphase_simulation_services_legacy
#                        @table::dunefddphase_reco_services_legacy
   PhotonVisibilityService: @local::dunefddphase_PhotonVisibilityService
}

services.DetectorPropertiesService.Electronlifetime:  1000.0e3         #in us
# services.message.destinations.LogStandardOut.threshold: "INFO"

#source is now a root file
source:
{
  module_type: RootInput
  maxEvents: -1
  fileNames: ["detsim.root"]
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 producers:
 {
# random number saver
  rns:                 { module_type: RandomNumberSaver }

   ophit:
	{
	  module_type:    "OpHitFinder"
	  GenModule:      "generator"
	  InputModule:    "opdigi"
	  InputLabels:    [ "" ]
	  ChannelMasks:   []
	  HitThreshold:   0.5    # PE
	  UseCalibrator:  false  # If set to false, SPE parameters below
		                 # are used     
	  AreaToPE:       true  # Use area to calculate number of PEs
	  SPEArea:        4.1   # If AreaToPE is true, this number is 
		                 # used as single PE area (in ADC counts)
	  SPEShift:       0      # Baseline offset in ADC->SPE conversion
	  reco_man:       @local::standard_preco_manager
	  HitAlgoPset:    @local::standard_algo_threshold
	  PedAlgoPset:
		{
		    Name: "UB"
		    BeamGateSamples : 1500
		    # You need to include parameters fed to PedTruncatedMean since that
		    # algo is called for beam gate sample as well
		    # Sliding mean number of samples
		    SampleSize:      50
		    MaxSigma:        1
		    PedRangeMax:     4100
		    PedRangeMin:     3900
		    
		    # RandomRange: 5
		    # RandomRangeDivisions: 4.0
		    Threshold: 4
		    # Number of ADC count to shift during random sampling
		    # RandomRangeShift: -0.5
		    # This parameter get's multiplied by mode_sigma to determine
		    # whether or not samples are close enough to be filled with random baseline
		    # between gaps
		    DiffBetweenGapsThreshold: 2
		    DiffADCCounts: 2
		    NPrePostSamples: 5
		}
	}
      opflash:
	{
	  module_type:   "OpFlashFinder"
	  InputModule:   "ophit"
	  BinWidth:       1   # us | Pulse finding parameters
	  FlashThreshold: 2   # PE
	  WidthTolerance: 0.5 # unitless 
	  TrigCoinc:      2.5 # in microseconds!
	}
 }

 #define the producer and filter modules for this path, order matters, 
 #filters reject all following items.  see lines starting physics.producers below
 reco: [ rns, ophit,opflash ]

	analyzers:
	{
          opdigiana:   @local::dunefddphase_opdigiana
          opflashana:  @local::dunefd_opflashana
	}
	 

 #define the output stream, there could be more than one if using filters 
 stream1:  [ opdigiana, opflashana, out1 ]

 #trigger_paths is a keyword and contains the paths that modify the art::event, 
 #ie filters and producers
 trigger_paths: [reco] 

 #end_paths is a keyword and contains the paths that do not modify the art::Event, 
 #ie analyzers and output streams.  these all run simultaneously
 end_paths:     [stream1]  
}

#block to define where the output goes.  if you defined a filter in the physics
#block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
#entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
 out1:
 {
   module_type: RootOutput
   fileName:    "%ifb_reco.root"
   dataTier:    "full-reconstructed"
   compressionLevel: 1
 }
}


services.OpDetResponseInterface.QuantumEfficiency: 0.2
services.LArPropertiesService.ScintPreScale: 1
