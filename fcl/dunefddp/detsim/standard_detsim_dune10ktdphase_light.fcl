#include "services_dune.fcl"
#include "singles_dune.fcl"
#include "marley_dune.fcl"
#include "photpropservices_dune.fcl"
#include "opticaldetectormodules_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "tools_dune.fcl"

process_name: detsim_light

services:
{
  # Load the service that manages root files for histograms.
  TFileService:          { fileName: "%ifb_detsim_hist.root" }
  TimeTracker:           {}
  MemoryTracker:         { } # default is one
  RandomNumberGenerator: {}                 # ART native random number generator
  FileCatalogMetadata:  @local::art_file_catalog_mc
                          @table::dunefddphase_simulation_services_legacy
  PhotonVisibilityService: @local::dunefddphase_PhotonVisibilityService
  NuRandomService:       @local::random_NuRandomService  # seedservice.fcl
  OpDigiProperties: @local::dunefddphase_OpDigiProperties
}

# Start each new event with an empty event.
source:
{
  module_type: RootInput
  maxEvents: -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics:
{
 
  producers:
  {
    rns:       { module_type: "RandomNumberSaver" }
    opdigi: @local::dunefddphase_opdigi
  }
	 
  simulate:      [ rns, opdigi]
  analyzeit:  []
  stream1: [out1 ]
 
  # Trigger_paths is a keyword and contains the paths that modify the art::event, 
  # ie filters and producers
  trigger_paths: [ simulate ] 
 
  # end_paths is a keyword and contains the paths that do not modify the art::Event, 
  # ie analyzers and output streams. These all run simultaneously
  end_paths:     [ analyzeit, stream1 ]  
}

# Block to define where the output goes. If you defined a filter in the physics
# block and put it in the trigger_paths then you need to put a SelectEvents: {SelectEvents: [XXX]}
# entry in the output stream you want those to go to, where XXX is the label of the filter module(s)
outputs:
{
  out1:
  {
    module_type: RootOutput
    fileName:    "%ifb_detsim.root" # Default file name, can override from command line with -o or --output
    dataTier:    "detsim"
    compressionLevel: 1
  }
}


services.LArG4Parameters.MinNumberOfElCluster: 20
