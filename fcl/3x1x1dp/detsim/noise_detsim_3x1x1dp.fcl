#include "services_dune.fcl"
#include "singles_dune.fcl"
#include "largeantmodules_dune.fcl"
#include "tools_dune.fcl"

process_name: Detsim

services: @local::dunedphase3x1x1_simulation_services_legacy
services.TFileService: { fileName: "detsim_hist.root" }
services.TimeTracker:       {}
services.MemoryTracker:         {} # default is one
services.RandomNumberGenerator: {} #ART native random number generator
services.FileCatalogMetadata:  @local::art_file_catalog_mc
services.NuRandomService:       @local::random_NuRandomService  # seedservice.fcl

#source is now a root file
source: {
  module_type: RootInput
  maxEvents:  -1        # Number of events to create
}

# Define and configure some modules to do work on each event.
# First modules are defined; they are scheduled later.
# Modules are grouped by type.
physics: {
 producers: {
   daq:            @local::dune_detsim
   rns:            { module_type: "RandomNumberSaver" }
 }
 simulate: [ rns, daq ]
 stream1:  [ out1 ]
 trigger_paths: [simulate] 
 end_paths:     [stream1]  
}

outputs: {
 out1: {
   module_type: RootOutput
   fileName:    "%ifb_detsim.root"
   dataTier:    "detector-simulated"
   compressionLevel: 1
 }
}

# Use fixed values instead of DB for pedestals.
services.DetPedestalService: @local::dunedp_fixedpeds

# DetSim flags.
physics.producers.daq.NoiseOn:     	 true
physics.producers.daq.PedestalOn:  	 true
physics.producers.daq.DistortOn:   	 false
physics.producers.daq.SuppressOn:  	 false #false when noise on
physics.producers.daq.KeepEmptyChannels: true

# DetSim services.
services.PedestalAdditionService:        @local::padprovided

services.DetPedestalService: @local::dunedp_fixedpeds
services.DetPedestalService.FixedDetPedestal.PedMeanErrY: 0
services.DetPedestalService.FixedDetPedestal.PedMeanErrZ: 0
services.DetPedestalService.FixedDetPedestal.PedMeanY: 10
services.DetPedestalService.FixedDetPedestal.PedMeanZ: 10
services.DetPedestalService.FixedDetPedestal.PedRmsErrY: 0
services.DetPedestalService.FixedDetPedestal.PedRmsErrZ: 0
services.DetPedestalService.FixedDetPedestal.PedRmsY: 0
services.DetPedestalService.FixedDetPedestal.PedRmsZ: 0

services.AdcDistortService:              @local::stuckbits
services.AdcSuppressService:             @local::zsonline
services.AdcCompressService:             @local::cmpreplace

services.SimChannelExtractService.DPGainPerView: 2


#===================New noise module ===========================================
#Configure realistic noise service for DP detectors based on the 311 data

services.ChannelNoiseService:{

	#Inchoerent noise only
	#service_provider: DPhaseRealisticNoiseService
	#NoiseModel:    "$MRB_SOURCE/dunetpc/dune/DetSim/NoiseModels/729-0_fft_mirror.root"    #path to the noise model root file
	#RandomizeX:    15. #0.002
	#RandomizeY:    15. #0.002
	#Smooth:        1000
	#SetFirst0:     false
	#SetBaseline:   false   #if true sum baseline to real noise model
	#NoiseArrayPoints: 1000
	#OldNoiseIndex: false   #From ExponentialChannelNoiseService. Keep false
	
	#Coherent noise
ervices.ChannelNoiseService:{
  	service_provider: DPhaseCoherentNoiseService
  	NoiseModel:       "$MRB_SOURCE/dunetpc/dune/DetSim/NoiseModels/729-0-mirror-fft.root"
  	AmplitudeCut:     0               #select frequencies above this threshold
  	Normalization:    1025            #amplitude normalizations
 	 Randomize:        [ 1, 1 ]        #rms amplitude [rms view , rms view 1]
  	PhaseShift:       [ -1, 1 ]       #phase shift per group of channels in radiants
  	ChannelGroup:     [ 0,            #list here the first channel of every significant correlation pattern group
                      32,
                      64,
                      96,
                      128,
                      160,
                      192,
                      224,
                      256,
                      288,
                      320,
                      352,
                      384,
                      416,
                      448,
                      480,
                      512,
                      544,
                      576,
                      608,
                      640,
                      672,
                      704,
                      736,
                      768,
                      800,
                      832,
                      864,
                      896,
                      928,
                      960,
                      1120,   #corr pattern over the full lem (by empirical observation of 729)
                      1280 ]  #corr pattern over the full lem (by empirical observation of 729)
  	InchoerentNoise:  [ 0.7, 1.1, 0.7, 1.1 ]      #rms and sigma of a small incohrent noise ( or very high frequency ) [ #mean view 0, rms view 0, mean view 1, rms view 1 ]. [] means no noise simulated
  	NumberOfPhases:   1000            #number of noise mask (channel vs time) to produce
 	 LogLevel:         0                 #Verbosity level
}	

}	
